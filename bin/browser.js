(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Keypad, pad;

  Keypad = require('keypad').Keypad;

  pad = new Keypad({
    delay: 500,
    text: 'Hello,\n'
  });

  (document.getElementById('key-1')).addEventListener('click', function() {
    console.log('push', '1');
    return pad.emit('push', '1');
  });

  (document.getElementById('key-2')).addEventListener('click', function() {
    console.log('push', '2');
    return pad.emit('push', '2');
  });

  (document.getElementById('key-3')).addEventListener('click', function() {
    console.log('push', '3');
    return pad.emit('push', '3');
  });

  (document.getElementById('key-4')).addEventListener('click', function() {
    console.log('push', '4');
    return pad.emit('push', '4');
  });

  (document.getElementById('key-5')).addEventListener('click', function() {
    console.log('push', '5');
    return pad.emit('push', '5');
  });

  (document.getElementById('key-6')).addEventListener('click', function() {
    console.log('push', '6');
    return pad.emit('push', '6');
  });

  (document.getElementById('key-7')).addEventListener('click', function() {
    console.log('push', '7');
    return pad.emit('push', '7');
  });

  (document.getElementById('key-8')).addEventListener('click', function() {
    console.log('push', '8');
    return pad.emit('push', '8');
  });

  (document.getElementById('key-9')).addEventListener('click', function() {
    console.log('push', '9');
    return pad.emit('push', '9');
  });

  (document.getElementById('key-a')).addEventListener('click', function() {
    console.log('push', '*');
    return pad.emit('push', '*');
  });

  (document.getElementById('key-0')).addEventListener('click', function() {
    console.log('push', '0');
    return pad.emit('push', '0');
  });

  (document.getElementById('key-b')).addEventListener('click', function() {
    console.log('push', '#');
    return pad.emit('push', '#');
  });

  setInterval(function() {
    (document.getElementById('screen-inner-text')).innerHTML = pad.text.replace('\n', '<br>');
    (document.getElementById('screen-inner-character')).innerHTML = pad.character;
    return (document.getElementById('screen-inner-case')).innerHTML = pad["case"];
  }, 50);

}).call(this);

//# sourceMappingURL=main.js.map

},{"keypad":5}],2:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/**
	@module Keypad
	@author muchweb
 */

(function() {
  'use strict';
  var EventEmitter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  exports.Keypad = (function(_super) {
    __extends(_Class, _super);


    /**
    		Name of selected map
    		@property map_name
    		@type String
    		@default 'nokia'
     */

    _Class.prototype.map_name = 'nokia';


    /**
    		Full typed in text
    		@property text
    		@type String
    		@default ''
     */

    _Class.prototype.text = '';


    /**
    		Character that is currently being typed
    		@property character
    		@type String
    		@default null
     */

    _Class.prototype.character = null;


    /**
    		Currently used mapping
    		@property mapping
    		@type Object
    		@default null
     */

    _Class.prototype.mapping = null;


    /**
    		Timeout that is used to interrupt typing
    		@property timeout
    		@type Object
    		@default null
     */

    _Class.prototype.timeout = null;


    /**
    		Delay for typing timeout
    		@property delay
    		@type Number
    		@default 100
     */

    _Class.prototype.delay = 100;


    /**
    		List of available cases
    		@static
    		@property caselist
    		@type Object
     */

    _Class.caselist = ['Abc', 'abc', 'ABC', '123'];


    /**
    		Uppercase of lowercase
    		@property case
    		@type String
    		@default 'Abc'
     */

    _Class.prototype["case"] = null;


    /**
    		Characters that interrupt a sentence
    		@property interrupt_case
    		@type String
    		@default '.\n'
     */

    _Class.prototype.interrupt_case = '.\n';


    /**
    		12-key keyboard layout emulation, similar to one that is used in mobile phones
    		@class Keypad
    		@extends EventEmitter
    		@param {[Object]} options Overwrite default `Keypad` options
     */

    function _Class(options) {
      var KeyMap, key, val;
      if (options == null) {
        options = {};
      }
      for (key in options) {
        val = options[key];
        this[key] = val;
      }
      if ((typeof window !== "undefined" && window !== null) && this.map_name !== 'nokia') {
        throw new Error('Custom maps cannot be selected in browser demo');
      }
      KeyMap = require('./MapNokia.js').KeyMap;
      this.mapping = KeyMap;
      this["case"] = exports.Keypad.caselist[0];
      this.on('push', (function(_this) {
        return function(key) {
          return _this.ProcessKey(key);
        };
      })(this));
    }


    /**
    		Process a keypress
    		@method ProcessKey
    		@param {String} key Key character
     */

    _Class.prototype.ProcessKey = function(key) {
      var current_index;
      if (key == null) {
        throw new Error('Please specify pressed key code');
      }
      if (key === 'c') {
        return this.Backspace();
      }
      if (this.mapping[key] == null) {
        throw new Error("This key code was not found in mapping: '" + key + "'");
      }
      current_index = this.mapping[key].indexOf(this.character);
      if (current_index >= 0) {
        this.ResetTimeout();
        if (this.mapping[key][current_index + 1] != null) {
          return this.character = this.mapping[key][current_index + 1];
        }
        return this.character = this.mapping[key][0];
      }
      this.InsertCharacter(this.character);
      this.character = this.mapping[key][0];
      if (this.character === 'CASE') {
        return this.LoopCase();
      }
      return this.ResetTimeout();
    };


    /**
    		Remove last character
    		@method Backspace
     */

    _Class.prototype.Backspace = function() {
      this.character = null;
      if (this.text.length === 0) {
        return null;
      }
      return this.text = this.text.slice(0, -1);
    };


    /**
    		Looping through available cases
    		@method LoopCase
     */

    _Class.prototype.LoopCase = function() {
      var current_index;
      this.character = null;
      current_index = exports.Keypad.caselist.indexOf(this["case"]);
      if (exports.Keypad.caselist[current_index + 1] != null) {
        return this["case"] = exports.Keypad.caselist[current_index + 1];
      }
      return this["case"] = exports.Keypad.caselist[0];
    };


    /**
    		Returns character that will be inserted, with current case
    		@method GetInsertCharacter
    		@param {String} text Selected (typed) string
     */

    _Class.prototype.GetInsertCharacter = function(text) {
      if (text == null) {
        text = this.character;
      }
      if (text == null) {
        return null;
      }
      if (this["case"][0] === 'A') {
        text = text.toUpperCase();
      }
      return text;
    };


    /**
    		Apply selected (typed) text
    		@method InsertCharacter
    		@param {String} text Selected (typed) string
     */

    _Class.prototype.InsertCharacter = function(text) {
      var inserted;
      if (text == null) {
        text = this.character;
      }
      if (text == null) {
        return;
      }
      inserted = this.GetInsertCharacter();
      this.text += inserted;
      this.character = null;
      if (this["case"] !== 'ABC') {
        this["case"] = 'abc';
      }
      if (this["case"] !== 'ABC' && (this.interrupt_case.indexOf(inserted)) >= 0) {
        return this["case"] = 'Abc';
      }
    };


    /**
    		Resetting typing tymeout
    		@method ResetTimeout
     */

    _Class.prototype.ResetTimeout = function() {
      return this.timeout = setTimeout((function(_this) {
        return function() {
          _this.InsertCharacter();
          return _this.timeout = null;
        };
      })(this), this.delay);
    };

    return _Class;

  })(EventEmitter);

}).call(this);

//# sourceMappingURL=Keypad.js.map

},{"./MapNokia.js":4,"events":2}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/**
	@module Keypad
	@author muchweb
 */

(function() {
  'use strict';
  exports.KeyMap = {
    '1': ['.', ',', '?', '!', '\'', '"', '1', '-', '(', ')', '@', '/', ':', '_'],
    '2': ['a', 'b', 'c', '2', 'ä', 'æ', 'å', 'à', 'á', 'â', 'ã', 'ç'],
    '3': ['d', 'e', 'f', '3', 'è', 'é', 'ê', 'ð'],
    '4': ['g', 'h', 'i', '4', 'ì', 'í', 'î', 'ï'],
    '5': ['j', 'k', 'l', '5', '£'],
    '6': ['m', 'n', 'o', '6', 'ö', 'ø', 'ò', 'ó', 'ô', 'õ', 'ñ'],
    '7': ['p', 'q', 'r', 's', '7', 'ß', '$'],
    '8': ['t', 'u', 'v', '8', 'ù', 'ú', 'û', 'ü'],
    '9': ['w', 'x', 'y', 'z', '9', 'ý', 'þ'],
    '*': [],
    '0': [' ', '0', '\n'],
    '#': ['CASE']
  };

}).call(this);

//# sourceMappingURL=MapNokia.js.map

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0

/**
	@module Keypad
	@author muchweb
 */

(function() {
  'use strict';
  module.exports = {
    Keypad: (require('./Keypad.js')).Keypad
  };

}).call(this);

//# sourceMappingURL=main.js.map

},{"./Keypad.js":3}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
